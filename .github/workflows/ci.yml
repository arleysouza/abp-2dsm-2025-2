name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  node-ci:
    name: Node.js CI
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json

      # 3. Instalar dependências
      - name: Install dependencies
        run: npm install
        working-directory: ./server

      # 4. Checar formatação (Prettier)
      - name: Run Prettier check
        run: npm run format:check
        working-directory: ./server

      # 5. Lint (ESLint)
      - name: Run ESLint
        run: npm run lint
        working-directory: ./server

      # 6. Build (TypeScript)
      - name: Run TypeScript build
        run: npm run build
        working-directory: ./server

  docker-ci:
    name: Docker Compose CI
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Docker Buildx (necessário para build no CI)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Build containers com docker-compose.dev.yml
      - name: Build Docker Compose stack
        run: docker compose -f docker-compose.dev.yml build

      # 4. Subir stack
      - name: Start services
        run: docker compose -f docker-compose.dev.yml up -d

      # 5. Verificar containers rodando
      - name: Check running containers
        run: docker ps -a

      # 6. Derrubar stack no fim
      - name: Shutdown services
        if: always()
        run: docker compose -f docker-compose.dev.yml down -v
